// Code generated by go-swagger; DO NOT EDIT.

package broadcast

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetBroadcastsYearMonthDayParams creates a new GetBroadcastsYearMonthDayParams object
// with the default values initialized.
func NewGetBroadcastsYearMonthDayParams() *GetBroadcastsYearMonthDayParams {
	var ()
	return &GetBroadcastsYearMonthDayParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetBroadcastsYearMonthDayParamsWithTimeout creates a new GetBroadcastsYearMonthDayParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetBroadcastsYearMonthDayParamsWithTimeout(timeout time.Duration) *GetBroadcastsYearMonthDayParams {
	var ()
	return &GetBroadcastsYearMonthDayParams{

		timeout: timeout,
	}
}

// NewGetBroadcastsYearMonthDayParamsWithContext creates a new GetBroadcastsYearMonthDayParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetBroadcastsYearMonthDayParamsWithContext(ctx context.Context) *GetBroadcastsYearMonthDayParams {
	var ()
	return &GetBroadcastsYearMonthDayParams{

		Context: ctx,
	}
}

// NewGetBroadcastsYearMonthDayParamsWithHTTPClient creates a new GetBroadcastsYearMonthDayParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetBroadcastsYearMonthDayParamsWithHTTPClient(client *http.Client) *GetBroadcastsYearMonthDayParams {
	var ()
	return &GetBroadcastsYearMonthDayParams{
		HTTPClient: client,
	}
}

/*GetBroadcastsYearMonthDayParams contains all the parameters to send to the API endpoint
for the get broadcasts year month day operation typically these are written to a http.Request
*/
type GetBroadcastsYearMonthDayParams struct {

	/*Day
	  Optional two-digit day to get the broadcasts for. Requires all preceeding parameters.

	*/
	Day int64
	/*Month
	  Optional two-digit month to get the broadcasts for. Requires all preceeding parameters.

	*/
	Month int64
	/*PageNumber
	  The page number of the list.

	*/
	PageNumber *int64
	/*PageSize
	  Maximum number of entries that are returned per page. Defaults to 50, maximum is 500.

	*/
	PageSize *int64
	/*Q
	  Query string to search for.

	*/
	Q *string
	/*Sort
	  Name of the sort field, optionally prefixed with a `-` for descending order.

	*/
	Sort *string
	/*Year
	  The four-digit year to get the broadcasts for.

	*/
	Year int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get broadcasts year month day params
func (o *GetBroadcastsYearMonthDayParams) WithTimeout(timeout time.Duration) *GetBroadcastsYearMonthDayParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get broadcasts year month day params
func (o *GetBroadcastsYearMonthDayParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get broadcasts year month day params
func (o *GetBroadcastsYearMonthDayParams) WithContext(ctx context.Context) *GetBroadcastsYearMonthDayParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get broadcasts year month day params
func (o *GetBroadcastsYearMonthDayParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get broadcasts year month day params
func (o *GetBroadcastsYearMonthDayParams) WithHTTPClient(client *http.Client) *GetBroadcastsYearMonthDayParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get broadcasts year month day params
func (o *GetBroadcastsYearMonthDayParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDay adds the day to the get broadcasts year month day params
func (o *GetBroadcastsYearMonthDayParams) WithDay(day int64) *GetBroadcastsYearMonthDayParams {
	o.SetDay(day)
	return o
}

// SetDay adds the day to the get broadcasts year month day params
func (o *GetBroadcastsYearMonthDayParams) SetDay(day int64) {
	o.Day = day
}

// WithMonth adds the month to the get broadcasts year month day params
func (o *GetBroadcastsYearMonthDayParams) WithMonth(month int64) *GetBroadcastsYearMonthDayParams {
	o.SetMonth(month)
	return o
}

// SetMonth adds the month to the get broadcasts year month day params
func (o *GetBroadcastsYearMonthDayParams) SetMonth(month int64) {
	o.Month = month
}

// WithPageNumber adds the pageNumber to the get broadcasts year month day params
func (o *GetBroadcastsYearMonthDayParams) WithPageNumber(pageNumber *int64) *GetBroadcastsYearMonthDayParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get broadcasts year month day params
func (o *GetBroadcastsYearMonthDayParams) SetPageNumber(pageNumber *int64) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get broadcasts year month day params
func (o *GetBroadcastsYearMonthDayParams) WithPageSize(pageSize *int64) *GetBroadcastsYearMonthDayParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get broadcasts year month day params
func (o *GetBroadcastsYearMonthDayParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithQ adds the q to the get broadcasts year month day params
func (o *GetBroadcastsYearMonthDayParams) WithQ(q *string) *GetBroadcastsYearMonthDayParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the get broadcasts year month day params
func (o *GetBroadcastsYearMonthDayParams) SetQ(q *string) {
	o.Q = q
}

// WithSort adds the sort to the get broadcasts year month day params
func (o *GetBroadcastsYearMonthDayParams) WithSort(sort *string) *GetBroadcastsYearMonthDayParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get broadcasts year month day params
func (o *GetBroadcastsYearMonthDayParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithYear adds the year to the get broadcasts year month day params
func (o *GetBroadcastsYearMonthDayParams) WithYear(year int64) *GetBroadcastsYearMonthDayParams {
	o.SetYear(year)
	return o
}

// SetYear adds the year to the get broadcasts year month day params
func (o *GetBroadcastsYearMonthDayParams) SetYear(year int64) {
	o.Year = year
}

// WriteToRequest writes these params to a swagger request
func (o *GetBroadcastsYearMonthDayParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param day
	if err := r.SetPathParam("day", swag.FormatInt64(o.Day)); err != nil {
		return err
	}

	// path param month
	if err := r.SetPathParam("month", swag.FormatInt64(o.Month)); err != nil {
		return err
	}

	if o.PageNumber != nil {

		// query param page[number]
		var qrPageNumber int64
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt64(qrPageNumber)
		if qPageNumber != "" {
			if err := r.SetQueryParam("page[number]", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page[size]
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page[size]", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	// path param year
	if err := r.SetPathParam("year", swag.FormatInt64(o.Year)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
