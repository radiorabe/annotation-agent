// Code generated by go-swagger; DO NOT EDIT.

package broadcast

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new broadcast API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for broadcast API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetBroadcastsID(params *GetBroadcastsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetBroadcastsIDOK, error)

	GetBroadcastsYearMonthDay(params *GetBroadcastsYearMonthDayParams, authInfo runtime.ClientAuthInfoWriter) (*GetBroadcastsYearMonthDayOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetBroadcastsID Returns a single broadcast.
*/
func (a *Client) GetBroadcastsID(params *GetBroadcastsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetBroadcastsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBroadcastsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBroadcastsID",
		Method:             "GET",
		PathPattern:        "/broadcasts/{id}",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBroadcastsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBroadcastsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBroadcastsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBroadcastsYearMonthDay Returns a list of broadcasts at the given date/time span.
*/
func (a *Client) GetBroadcastsYearMonthDay(params *GetBroadcastsYearMonthDayParams, authInfo runtime.ClientAuthInfoWriter) (*GetBroadcastsYearMonthDayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBroadcastsYearMonthDayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBroadcastsYearMonthDay",
		Method:             "GET",
		PathPattern:        "/broadcasts/{year}/{month}/{day}",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBroadcastsYearMonthDayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBroadcastsYearMonthDayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBroadcastsYearMonthDay: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
