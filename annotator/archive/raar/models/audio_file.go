// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AudioFile audio file
//
// swagger:model AudioFile
type AudioFile struct {

	// attributes
	Attributes *AudioFileAttributes `json:"attributes,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// links
	Links *AudioFileLinks `json:"links,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this audio file
func (m *AudioFile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AudioFile) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *AudioFile) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AudioFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AudioFile) UnmarshalBinary(b []byte) error {
	var res AudioFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AudioFileAttributes audio file attributes
//
// swagger:model AudioFileAttributes
type AudioFileAttributes struct {

	// bitrates
	Bitrates int64 `json:"bitrates,omitempty"`

	// channels
	Channels int64 `json:"channels,omitempty"`

	// codec
	Codec string `json:"codec,omitempty"`

	// playback format
	PlaybackFormat string `json:"playback_format,omitempty"`
}

// Validate validates this audio file attributes
func (m *AudioFileAttributes) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AudioFileAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AudioFileAttributes) UnmarshalBinary(b []byte) error {
	var res AudioFileAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AudioFileLinks audio file links
//
// swagger:model AudioFileLinks
type AudioFileLinks struct {

	// download
	// Read Only: true
	Download string `json:"download,omitempty"`

	// play
	// Read Only: true
	Play string `json:"play,omitempty"`

	// self
	// Read Only: true
	Self string `json:"self,omitempty"`
}

// Validate validates this audio file links
func (m *AudioFileLinks) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AudioFileLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AudioFileLinks) UnmarshalBinary(b []byte) error {
	var res AudioFileLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
