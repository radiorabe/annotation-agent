// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Broadcast broadcast
//
// swagger:model Broadcast
type Broadcast struct {

	// attributes
	Attributes *BroadcastAttributes `json:"attributes,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// links
	Links *BroadcastLinks `json:"links,omitempty"`

	// relationships
	Relationships *BroadcastRelationships `json:"relationships,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this broadcast
func (m *Broadcast) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Broadcast) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *Broadcast) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *Broadcast) validateRelationships(formats strfmt.Registry) error {

	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Broadcast) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Broadcast) UnmarshalBinary(b []byte) error {
	var res Broadcast
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BroadcastAttributes broadcast attributes
//
// swagger:model BroadcastAttributes
type BroadcastAttributes struct {

	// audio access
	AudioAccess bool `json:"audio_access,omitempty"`

	// details
	Details string `json:"details,omitempty"`

	// finished at
	// Format: date-time
	FinishedAt strfmt.DateTime `json:"finished_at,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// people
	People string `json:"people,omitempty"`

	// started at
	// Format: date-time
	StartedAt strfmt.DateTime `json:"started_at,omitempty"`
}

// Validate validates this broadcast attributes
func (m *BroadcastAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFinishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BroadcastAttributes) validateFinishedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.FinishedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("attributes"+"."+"finished_at", "body", "date-time", m.FinishedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BroadcastAttributes) validateStartedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.StartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("attributes"+"."+"started_at", "body", "date-time", m.StartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BroadcastAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BroadcastAttributes) UnmarshalBinary(b []byte) error {
	var res BroadcastAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BroadcastLinks broadcast links
//
// swagger:model BroadcastLinks
type BroadcastLinks struct {

	// self
	// Read Only: true
	Self string `json:"self,omitempty"`

	// update
	// Read Only: true
	Update string `json:"update,omitempty"`
}

// Validate validates this broadcast links
func (m *BroadcastLinks) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BroadcastLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BroadcastLinks) UnmarshalBinary(b []byte) error {
	var res BroadcastLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BroadcastRelationships broadcast relationships
//
// swagger:model BroadcastRelationships
type BroadcastRelationships struct {

	// show
	Show *BroadcastRelationshipsShow `json:"show,omitempty"`
}

// Validate validates this broadcast relationships
func (m *BroadcastRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateShow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BroadcastRelationships) validateShow(formats strfmt.Registry) error {

	if swag.IsZero(m.Show) { // not required
		return nil
	}

	if m.Show != nil {
		if err := m.Show.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "show")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BroadcastRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BroadcastRelationships) UnmarshalBinary(b []byte) error {
	var res BroadcastRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BroadcastRelationshipsShow broadcast relationships show
//
// swagger:model BroadcastRelationshipsShow
type BroadcastRelationshipsShow struct {

	// data
	Data *BroadcastRelationshipsShowData `json:"data,omitempty"`
}

// Validate validates this broadcast relationships show
func (m *BroadcastRelationshipsShow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BroadcastRelationshipsShow) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "show" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BroadcastRelationshipsShow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BroadcastRelationshipsShow) UnmarshalBinary(b []byte) error {
	var res BroadcastRelationshipsShow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BroadcastRelationshipsShowData broadcast relationships show data
//
// swagger:model BroadcastRelationshipsShowData
type BroadcastRelationshipsShowData struct {

	// id
	ID string `json:"id,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this broadcast relationships show data
func (m *BroadcastRelationshipsShowData) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BroadcastRelationshipsShowData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BroadcastRelationshipsShowData) UnmarshalBinary(b []byte) error {
	var res BroadcastRelationshipsShowData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
